{"version":3,"sources":["pages/Home/HomePage.module.css","images/the_rick_and_morty.png","commons/AliveStatus.tsx","components/CharacterTile.tsx","services/CharacterService.ts","utils/Util.ts","pages/Home/HomePage.tsx","pages/Character/CharacterPage.tsx","App.tsx","index.tsx","pages/Character/CharacterPage.module.css","components/CharacterTile.module.css"],"names":["module","exports","AliveStatus","props","color","status","title","style","width","height","display","borderRadius","backgroundColor","CharacterTile","character","className","classes","tile","image","src","alt","name","details","flex","species","gender","type","origin","location","BASE_URL","fetchPage","a","pageId","fetch","response","json","fetchCharacter","characterId","getPageNumberFromURL","url","pathParts","split","result","parseInt","isNaN","HomePage","pageRef","createRef","handleGoToPageClick","bind","this","match","params","handlePageChange","current","value","step","direction","page","info","pageNumber","history","push","toString","pageNum","maxPage","pages","pageLoading","Navigation","data-testid","disabled","prev","onClick","handlePageNavigation","next","id","ref","max","padding","gallery","results","map","textDecoration","to","Component","CharacterPage","handleCharacterChange","characterLoading","GoBack","goBack","wrapper","target","rel","href","Array","isArray","episode","marginTop","episodeItem","chip","App","state","selectedPage","selectedCharacter","setState","newState","error","matchedCharacter","find","theRickAndMortyLogo","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,QAAU,0BAA0B,yBAAyB,yCAAyC,uBAAuB,yC,6NCDhI,G,MAAA,IAA0B,gD,wCC8B1BC,EAvBK,SAACC,GACjB,IAAIC,EAAQ,OACZ,OAAQD,EAAME,QACV,IAAK,QACDD,EAAQ,QACR,MACJ,IAAK,OACDA,EAAQ,MAIhB,OACI,qBACIE,MAAOH,EAAME,OACbE,MAAO,CACHC,MAAO,GACPC,OAAQ,GACRC,QAAS,eACTC,aAAc,MACdC,gBAAiBR,MCalBS,EAvBO,SAACV,GAA+B,IAC1CW,EAAcX,EAAdW,UAER,OACI,0BAASC,UAAWC,IAAQC,KAAMX,MAAM,4BAAxC,UACI,qBAAKS,UAAWC,IAAQE,MAAxB,SACI,qBAAKH,UAAWC,IAAQ,aAAcG,IAAKL,EAAUI,MAAOE,IAAKN,EAAUO,SAE/E,sBAAKN,UAAWC,IAAQM,QAAxB,UACI,sBAAKf,MAAO,CAAEG,QAAS,QAAvB,UAAiC,8BAAMI,EAAUO,OAAW,qBAAKd,MAAO,CAAEgB,KAAM,KAAW,cAAC,EAAD,CAAalB,OAAQS,EAAUT,YAC1H,sBAAKU,UAAWC,IAAQ,eAAxB,UACI,sBAAKD,UAAWC,IAAQ,oBAAxB,UAA8CF,EAAUU,QAAxD,MAAoEV,EAAUW,UAC9E,qBAAKV,UAAWC,IAAQ,oBAAxB,SACKF,EAAUY,KAAO,sBAAKX,UAAWC,IAAQ,oBAAxB,UAA6C,sCAA7C,IAA2DF,EAAUY,QAAc,OAEzG,sBAAKX,UAAWC,IAAQ,oBAAxB,UAA6C,wCAA7C,MAA+DF,EAAUa,OAAON,QAChF,sBAAKN,UAAWC,IAAQ,oBAAxB,UAA6C,qCAA7C,MAA4DF,EAAUc,SAASP,kBChCtFQ,EAAW,mCAOXC,EAAS,uCAAG,0CAAAC,EAAA,6DAAOC,EAAP,+BAAwB,EAAxB,SAEEC,MAAM,GAAD,OAAIJ,EAAJ,0BAA8BG,IAFrC,cAEfE,EAFe,gBAGRA,EAASC,OAHD,mFAAH,qDAUTC,EAAc,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEAEHE,MAAM,GAAD,OAAIJ,EAAJ,qBAAyBQ,IAF3B,cAEpBH,EAFoB,gBAGbA,EAASC,OAHI,mFAAH,sDCXdG,EAAuB,SAACC,GACjC,IAAKA,EAAK,OAAQ,EAClB,IAAMC,EAAYD,EAAIE,MAAJ,UAAaZ,EAAb,oBACZa,EAASC,SAASH,EAAU,IAAM,MACxC,OAAOI,MAAMF,IAAW,EAAIA,GCkIjBG,E,kDAtHX,WAAY1C,GAAkE,IAAD,8BACzE,cAAMA,IAHF2C,aAEqE,EAGzE,EAAKA,QAAUC,sBACf,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAJ8C,E,qDAO7E,WAAqB,IAAD,MAEVjB,EAAM,UAAGkB,KAAK/C,aAAR,iBAAG,EAAYgD,aAAf,iBAAG,EAAmBC,cAAtB,aAAG,EAA2BpB,OAC1CkB,KAAK/C,MAAMkD,iBAAiBrB,GAExBkB,KAAKJ,QAAQQ,UACbJ,KAAKJ,QAAQQ,QAAQC,MAAQvB,K,kCAQrC,SAAqBwB,GAAe,IAAD,EACzBC,EAAYD,EAAO,EAAI,OAAS,OAChCjB,EAAG,UAAGW,KAAK/C,MAAMuD,YAAd,aAAG,EAAiBC,KAAKF,GAC5BG,EAAatB,EAAqBC,GAEpCqB,EAAa,IACbV,KAAK/C,MAAMkD,iBAAiBO,GAC5BV,KAAK/C,MAAM0D,QAAQC,KAAnB,WAA6BF,IACzBV,KAAKJ,QAAQQ,UACbJ,KAAKJ,QAAQQ,QAAQC,MAAQK,EAAWG,e,iCAQpD,WAAuB,IAAD,IAGdC,EAAUrB,UAAS,UAAAO,KAAKJ,QAAQQ,eAAb,eAAsBC,QAAS,KAChDU,GAAW,UAAAf,KAAK/C,MAAMuD,YAAX,eAAiBC,KAAKO,QAAS,EAE5CD,EAAUD,IACVA,EAAUC,GAEVD,EAAU,IACVA,EAAU,GAGdd,KAAK/C,MAAMkD,iBAAiBW,GAC5Bd,KAAK/C,MAAM0D,QAAQC,KAAnB,WAA6BE,IAEzBd,KAAKJ,QAAQQ,UACbJ,KAAKJ,QAAQQ,QAAQC,MAAQS,EAAQD,c,oBAI7C,WAAU,IAAD,aACyBb,KAAK/C,MAA3BuD,EADH,EACGA,KAAMS,EADT,EACSA,YAERC,EACF,qBAAKrD,UAAWC,IAAQ,kBAAxB,SAEQ0C,EAAO,qCACH,sBAAK3C,UAAWC,IAAQ,0BAAxB,UAAmD,wBAC/CqD,cAAY,aACZC,UAAgE,IAAtDhC,EAAoB,UAACY,KAAK/C,MAAMuD,YAAZ,aAAC,EAAiBC,KAAKY,MACrDC,QAAS,WAAQ,EAAKC,sBAAsB,IAHG,kBAK/C,wBACIJ,cAAY,aACZC,UAAgE,IAAtDhC,EAAoB,UAACY,KAAK/C,MAAMuD,YAAZ,aAAC,EAAiBC,KAAKe,MACrDF,QAAS,WAAQ,EAAKC,qBAAqB,IAH/C,qBAKJ,sBAAK1D,UAAWC,IAAQ,wBAAxB,UACI,uBACI2D,GAAG,OACHN,cAAY,iBACZ3C,KAAK,SACLkD,IAAK1B,KAAKJ,QACV+B,IAAKnB,EAAKC,KAAKO,MACf3D,MAAO,CAAEK,gBAAiB,OAAQR,MAAO,UAAWI,MAAO,GAAIsE,QAAS,KAC5E,wBACIT,cAAY,iBACZG,QAAStB,KAAKF,oBAFlB,8BAMJ,wBACIqB,cAAY,aACZG,QAAS,WAAQ,EAAKrE,MAAM0D,QAAQC,KAAK,MAF7C,oBAOhB,OAAIK,EACO,qCAAGC,EAAW,qBAAKrD,UAAU,UAAUR,MAAO,CAAEH,MAAO,QAAzC,+BAIpBsD,EAKE,qCAAGU,EAAW,qBAAKrD,UAAWC,IAAQ+D,QAAxB,SAChBrB,EAAKsB,QAAQC,KAAI,SAAAnE,GAAS,OACvB,cAAC,IAAD,CAEIP,MAAO,CAAE2E,eAAgB,QACzBC,GAAE,qBAAgBrE,EAAU6D,IAHhC,SAII,cAAC,EAAD,CAAe7D,UAAWA,KAHrBA,EAAU6D,YAPhB,qCAAGP,EAAW,qBAAKrD,UAAU,UAAUR,MAAO,CAAEH,MAAO,QAAzC,yH,GA1GVgF,a,gBCsERC,E,uKAvEX,WAAqB,IAAD,MACVhD,EAAW,UAAGa,KAAK/C,aAAR,iBAAG,EAAYgD,aAAf,iBAAG,EAAmBC,cAAtB,aAAG,EAA2Bf,YAC/Ca,KAAK/C,MAAMmF,sBAAsB3C,SAASN,M,oBAG9C,WAAU,IAAD,SACmCa,KAAK/C,MAArCW,EADH,EACGA,UAAWyE,EADd,EACcA,iBAEbC,EAAS,wBAAQnB,cAAY,eAAeG,QAAS,WAAQ,EAAKrE,MAAM0D,QAAQ4B,UAAvE,uBAGf,OAAIF,EACQ,qCAAGC,EAAO,qBAAKzE,UAAU,UAAUR,MAAO,CAAEH,MAAO,QAAzC,+BAIjBU,EAKG,qCACH0E,EACD,0BAASzE,UAAWC,IAAQ0E,QAA5B,UACI,qBAAK3E,UAAWC,IAAQ,mBAAxB,SACI,qBAAKT,MAAO,CAAEC,MAAO,QAAUY,IAAKN,EAAUO,KAAMF,IAAKL,EAAUI,UAEvE,sBAAKH,UAAWC,IAAQ,mBAAxB,UACI,qBAAKD,UAAWC,IAAQ,yBAAxB,SAAmDF,EAAUO,OAC7D,sBAAKN,UAAWC,IAAQ,wBAAxB,UACI,wCADJ,IACmB,cAAC,EAAD,CAAaX,OAAQS,EAAUT,SADlD,IAC8DS,EAAUT,UAExE,sBAAKU,UAAWC,IAAQ,wBAAxB,UACI,wCADJ,IACoBF,EAAUW,UAE9B,sBAAKV,UAAWC,IAAQ,wBAAxB,UACI,yCADJ,IACqBF,EAAUU,WAE9BV,EAAUY,KAAO,sBAAKX,UAAWC,IAAQ,wBAAxB,UAAiD,sCAAjD,IAA+DF,EAAUY,QAAc,KAEzG,sBAAKX,UAAWC,IAAQ,wBAAxB,UACI,iDADJ,IAC4B,mBAAG2E,OAAO,SAASC,IAAI,aAAaC,KAAM/E,EAAUa,OAAOY,IAA3D,SAAiEzB,EAAUa,OAAON,UAG1GP,EAAUc,SACJ,sBAAKb,UAAWC,IAAQ,wBAAxB,UAAiD,kDAAjD,IAA0E,mBAAG2E,OAAO,SAASC,IAAI,aAAaC,KAAM/E,EAAUc,SAASW,IAA7D,SAAmEzB,EAAUc,SAASP,UAChK,KAGNyE,MAAMC,QAAQjF,EAAUkF,SAClB,sBAAKzF,MAAO,CAAE0F,UAAW,GAAzB,UACE,mDAAyB,uBACzB,qBAAKlF,UAAWC,IAAQ,gBAAxB,SACKF,EAAUkF,QAAQf,KAAI,SAAAiB,GAAW,OAC9B,oBAEInF,UAAWC,IAAQmF,KACnBR,OAAO,SACPC,IAAI,aACJC,KAAMK,EALV,yBFvDN3D,EE6D0C2D,EF5DnE3D,GACaA,EAAIE,MAAJ,UAAaZ,EAAb,aAED,IAHA,MEuD4BqE,GFxDhB,IAAC3D,UEgEJ,cA9CX,qCAAGiD,EAAO,qBAAKzE,UAAU,UAAUR,MAAO,CAAEH,MAAO,QAAzC,qF,GAnBDgF,aCsHbgB,E,kDAtGb,WAAYjG,GAAsB,IAAD,8BAC/B,cAAMA,IAEDkG,MAAQ,CACXnC,MAAO,GACPoC,aAAc,KACdC,kBAAmB,KACnBpC,aAAa,EACboB,kBAAkB,GAGpB,EAAKlC,iBAAmB,EAAKA,iBAAiBJ,KAAtB,gBACxB,EAAKqC,sBAAwB,EAAKA,sBAAsBrC,KAA3B,gBAZE,E,2FAsBjC,WAAuBjB,GAAvB,qBAAAD,EAAA,yDACEmB,KAAKsD,SAAL,2BAAmBtD,KAAKmD,OAAxB,IAA+BlC,aAAa,KAExCP,EAAajB,SAASX,GACpByE,EAJR,eAIwBvD,KAAKmD,OACvB3C,EAAOR,KAAKmD,MAAMnC,MAAMN,EAAWG,YALzC,iCAQyBjC,EAAU8B,GARnC,QAQUlB,EARV,QAUgBgE,MAKVD,EAASH,aAAe,MAJxB5C,EAAOhB,EACP+D,EAASH,aAAe5C,EACxB+C,EAASvC,MAAT,2BAAsBuC,EAASvC,OAA/B,kBAAuCN,EAAaF,KAb1D,wBAkBI+C,EAASH,aAAe5C,EAlB5B,QAqBE+C,EAAStC,aAAc,EACvBjB,KAAKsD,SAASC,GAtBhB,iD,iIA+BA,WAA4BpE,GAA5B,mBAAAN,EAAA,yDACEmB,KAAKsD,SAAL,2BAAmBtD,KAAKmD,OAAxB,IAA+Bd,kBAAkB,KAC7CoB,EAFN,UAEyBzD,KAAKmD,MAAMC,oBAFpC,aAEyB,EAAyBtB,QAAQ4B,MAAK,SAAA9F,GAAS,OAAIA,EAAU6D,KAAOtC,KAF7F,gCAIyBD,EAAeC,GAJxC,OAIUK,EAJV,OAMIiE,EAAmBjE,EACfA,EAAOgE,QACTC,EAAmB,MARzB,OAYEzD,KAAKsD,SAAL,2BAAmBtD,KAAKmD,OAAxB,IAA+BE,kBAAmBI,EAAkBpB,kBAAkB,KAZxF,gD,2EAeA,WAAU,IAAD,OACP,OACE,qCACE,wBAAQxE,UAAU,aAAlB,SACE,qBAAKA,UAAU,kBAAkBK,IAAI,qBAAqBD,IAAK0F,MAEjE,cAAC,IAAD,UACE,sBAAM9F,UAAU,mBAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+F,KAAK,0BAA0BC,OAAQ,SAAC5G,GAAD,OAC5C,cAAC,EAAD,2BAAmBA,GAAnB,IACEW,UAAW,EAAKuF,MAAME,kBACtBjB,sBAAuB,EAAKA,sBAC5BC,iBAAkB,EAAKc,MAAMd,uBAEjC,cAAC,IAAD,CAAOuB,KAAK,WAAWC,OAAQ,SAAC5G,GAAD,OAC7B,cAAC,EAAD,2BAAcA,GAAd,IACEuD,KAAM,EAAK2C,MAAMC,aACjBjD,iBAAkB,EAAKA,iBACvBc,YAAa,EAAKkC,MAAMlC,kBAG5B,cAAC,IAAD,CAAO2C,KAAK,IAAZ,SACE,cAAC,IAAD,CAAU3B,GAAG,uB,GA5FXC,aCzBlB4B,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BnH,EAAOC,QAAU,CAAC,KAAO,4BAA4B,eAAe,oCAAoC,QAAU,+BAA+B,kBAAkB,uCAAuC,wBAAwB,6CAA6C,uBAAuB,4CAA4C,kBAAkB,yC,kBCApWD,EAAOC,QAAU,CAAC,KAAO,4BAA4B,MAAQ,6BAA6B,YAAY,iCAAiC,QAAU,+BAA+B,cAAc,mCAAmC,mBAAmB,wCAAwC,KAAO,+B","file":"static/js/main.bb160e54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gallery\":\"HomePage_gallery__vDhm-\",\"navigation-box-buttons\":\"HomePage_navigation-box-buttons__20GTy\",\"navigation-box-input\":\"HomePage_navigation-box-input__1MakE\"};","export default __webpack_public_path__ + \"static/media/the_rick_and_morty.ef0492d0.png\";","/**\n * I am skipping testsing for this component as it is a stateless and UI component\n * \n * This component shows the Character life status\n * Alive | Dead | unknown\n * @param props \n */\nconst AliveStatus = (props: { status: string }) => {\n    let color = 'gray';\n    switch (props.status) {\n        case 'Alive':\n            color = 'green';\n            break;\n        case 'Dead':\n            color = 'red';\n            break;\n    }\n\n    return (\n        <div\n            title={props.status}\n            style={{\n                width: 14,\n                height: 14,\n                display: 'inline-block',\n                borderRadius: '50%',\n                backgroundColor: color\n            }}></div>\n    );\n}\nexport default AliveStatus;","import ICharacter from \"../models/ICharacter\";\nimport classes from './CharacterTile.module.css';\nimport AliveStatus from '../commons/AliveStatus';\n\ninterface CharacterTileProps {\n    character: ICharacter;\n}\n\n/**\n * Show Character crisp details\n * \n * I am skipping testsing for this component given 2 reasons \n * 1: it is a stateless and UI component\n * 2: this has been tested under HomePage and App component already\n * @param props \n */\nconst CharacterTile = (props: CharacterTileProps) => {\n    const { character } = props;\n\n    return (\n        <section className={classes.tile} title=\"Click me for more details\">\n            <div className={classes.image}>\n                <img className={classes['image-img']} src={character.image} alt={character.name} />\n            </div>\n            <div className={classes.details}>\n                <div style={{ display: 'flex' }}><div>{character.name}</div><div style={{ flex: 1 }}></div><AliveStatus status={character.status} /></div>\n                <div className={classes['sub-details']}>\n                    <div className={classes['sub-details-line']}>{character.species} - {character.gender}</div>\n                    <div className={classes['sub-details-line']}>\n                        {character.type ? <div className={classes['sub-details-line']}><b>Type:</b> {character.type}</div> : null}\n                    </div>\n                    <div className={classes['sub-details-line']}><b>Origin:</b> - {character.origin.name}</div>\n                    <div className={classes['sub-details-line']}><b>Now:</b> - {character.location.name}</div>\n                </div>\n            </div>\n        </section >\n    );\n}\n\nexport default CharacterTile;","export const BASE_URL = 'https://rickandmortyapi.com/api/';\n\n\n/**\n * fetch RickAndMorty list of characters as per Page ID in a paginated manner\n * @param pageId \n */\nexport const fetchPage = async (pageId: number = 1) => {\n    // https://rickandmortyapi.com/api/character?page=1\n    const response = await fetch(`${BASE_URL}character?page=${pageId}`);\n    return await response.json();\n}\n\n/**\n * fetch RickAndMorty Character as per provided characterId\n * @param characterId \n */\nexport const fetchCharacter = async (characterId: number) => {\n    // https://rickandmortyapi.com/api/character/1\n    const response = await fetch(`${BASE_URL}character/${characterId}`);\n    return await response.json();\n}\n\n","import { BASE_URL } from '../services/CharacterService';\n\n/**\n * Fetch page from URL so that it can be used as Number for caching the PAGES\n * @param url \n */\nexport const getPageNumberFromURL = (url: string | null | undefined) => {\n    if (!url) return -1;\n    const pathParts = url.split(`${BASE_URL}character?page=`);\n    const result = parseInt(pathParts[1] || '-1');\n    return isNaN(result) ? -1 : result;\n}\n\n/**\n * Fetch Episode from URL so that it can be shown in human readable format\n * @param url \n */\nexport const getEpisodeFromURL = (url: string | null | undefined) => {\n    if (!url) return '';\n    const pathParts = url.split(`${BASE_URL}episode/`);\n\n    return pathParts[1] || '';\n}","import { Component, createRef } from 'react';\nimport IPage from '../../models/IPage';\nimport classes from './HomePage.module.css';\nimport CharacterTile from '../../components/CharacterTile';\nimport { Link } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\nimport { getPageNumberFromURL } from '../../utils/Util';\n\n\ninterface IHomePageProps {\n    page: IPage | null;\n    handlePageChange: Function;\n    pageLoading: boolean;\n}\n\n\n/**\n * This component is reponsible for showing pages with characters in a tile grid \n */\nclass HomePage extends Component<IHomePageProps & RouteComponentProps<{ pageId: string }>> {\n    private pageRef: React.RefObject<HTMLInputElement>; // for input to get page number\n\n    constructor(props: IHomePageProps & RouteComponentProps<{ pageId: string }>) {\n        super(props);\n\n        this.pageRef = createRef();\n        this.handleGoToPageClick = this.handleGoToPageClick.bind(this);\n    }\n\n    componentDidMount() {\n        // To fetch RickMortyPages as per given URL parameter\n        const pageId = this.props?.match?.params?.pageId;\n        this.props.handlePageChange(pageId);\n\n        if (this.pageRef.current) {\n            this.pageRef.current.value = pageId;\n        }\n    }\n\n    /**\n     * this is handler to go backwards and forward in pages list\n     * @param step \n     */\n    handlePageNavigation(step: number) {\n        const direction = step > 0 ? 'next' : 'prev';\n        const url = this.props.page?.info[direction];\n        const pageNumber = getPageNumberFromURL(url);\n\n        if (pageNumber > 0) {\n            this.props.handlePageChange(pageNumber);\n            this.props.history.push(`/${(pageNumber)}`);\n            if (this.pageRef.current) {\n                this.pageRef.current.value = pageNumber.toString();\n            }\n        }\n    }\n\n    /**\n     * this is handler to go to aparticular page as per user input\n     */\n    handleGoToPageClick() {\n        // normalisiing the input in a range of 1 to MAX pages as per API response in this case we check\n        // we refer page.info.pages means it is dynamic, in future it will work for thousand of pages as well\n        let pageNum = parseInt(this.pageRef.current?.value || '0');\n        const maxPage = (this.props.page?.info.pages || 1);\n\n        if (maxPage < pageNum) {\n            pageNum = maxPage;\n        }\n        if (pageNum < 0) {\n            pageNum = 1;\n        }\n\n        this.props.handlePageChange(pageNum);\n        this.props.history.push(`/${(pageNum)}`);\n\n        if (this.pageRef.current) {\n            this.pageRef.current.value = pageNum.toString();\n        }\n    }\n\n    render() {\n        const { page, pageLoading } = this.props;\n        // Navigation block with Prev+Next+GoToPage buttons\n        const Navigation = (\n            <nav className={classes['navigation-box']}>\n                {\n                    page ? <>\n                        <div className={classes['navigation-box-buttons']}><button\n                            data-testid=\"prevButton\"\n                            disabled={getPageNumberFromURL(this.props.page?.info.prev) === -1}\n                            onClick={() => { this.handlePageNavigation(-1) }}>Prev</button>\n\n                            <button\n                                data-testid=\"nextButton\"\n                                disabled={getPageNumberFromURL(this.props.page?.info.next) === -1}\n                                onClick={() => { this.handlePageNavigation(1); }}>Next</button>\n                        </div>\n                        <div className={classes['navigation-box-input']}>\n                            <input\n                                id=\"page\"\n                                data-testid=\"pageInputField\"\n                                type=\"number\"\n                                ref={this.pageRef}\n                                max={page.info.pages}\n                                style={{ backgroundColor: '#fff', color: '#22a2bd', width: 50, padding: 8 }} />\n                            <button\n                                data-testid=\"goToPageButton\"\n                                onClick={this.handleGoToPageClick}>Go to page</button>\n                        </div>\n                    </>\n                        :\n                        <button\n                            data-testid=\"homeButton\"\n                            onClick={() => { this.props.history.push('/'); }}>Home</button>}\n\n            </nav>);\n\n        // Navigation + Loading screen\n        if (pageLoading) {\n            return <>{Navigation}<div className=\"message\" style={{ color: '#00f' }}>Please wait...</div></>;\n        }\n\n        // Navigation + Error screen\n        if (!page) {\n            return <>{Navigation}<div className=\"message\" style={{ color: '#f00' }}>We have checked the whole \"The Rick and Morty\" universe but could not find what you are looking for!</div></>;\n        }\n\n        // Navigation + Content screen\n        return <>{Navigation}<div className={classes.gallery}>\n            {page.results.map(character =>\n                <Link\n                    key={character.id}\n                    style={{ textDecoration: 'none' }}\n                    to={`/character/${character.id}`}>\n                    <CharacterTile character={character} /></Link>)}\n        </div></>;\n    }\n}\n\nexport default HomePage;\n","import { Component } from \"react\";\nimport ICharacter from \"../../models/ICharacter\";\nimport { RouteComponentProps } from 'react-router';\nimport AliveStatus from \"../../commons/AliveStatus\";\nimport { getEpisodeFromURL } from \"../../utils/Util\";\nimport classes from \"./CharacterPage.module.css\";\n\ninterface ICharacterPageProps {\n    character: ICharacter | null | undefined;\n    handleCharacterChange: Function;\n    characterLoading: boolean,\n}\n\n/**\n * This component will show the character details\n */\nclass CharacterPage extends Component<ICharacterPageProps & RouteComponentProps<{ characterId: string }>> {\n\n    componentDidMount() {\n        const characterId = this.props?.match?.params?.characterId;\n        this.props.handleCharacterChange(parseInt(characterId));\n    }\n\n    render() {\n        const { character, characterLoading } = this.props;\n        // Go back navigation\n        const GoBack = <button data-testid=\"goBackButton\" onClick={() => { this.props.history.goBack() }}>&lt; Go Back</button>;\n\n        // Go back navigation + loading screen\n        if (characterLoading) {\n            return (<>{GoBack}<div className=\"message\" style={{ color: '#00f' }}>Please wait...</div></>);\n        }\n\n        // Go back navigation + Error screen\n        if (!character) {\n            return <>{GoBack}<div className=\"message\" style={{ color: '#f00' }}>Character not found in the whole \"The Rick and Morty\" universe !</div></>\n        }\n\n        // Go back navigation + Main Content\n        return (<>\n            {GoBack}\n            <section className={classes.wrapper} >\n                <div className={classes['profile-picture']}>\n                    <img style={{ width: '100%' }} alt={character.name} src={character.image} />\n                </div>\n                <div className={classes['profile-details']}>\n                    <div className={classes['profile-details-title']}>{character.name}</div>\n                    <div className={classes['profile-details-item']}>\n                        <b>Status:</b> <AliveStatus status={character.status} /> {character.status}\n                    </div>\n                    <div className={classes['profile-details-item']}>\n                        <b>Gender:</b> {character.gender}\n                    </div>\n                    <div className={classes['profile-details-item']}>\n                        <b>Species:</b> {character.species}\n                    </div>\n                    {character.type ? <div className={classes['profile-details-item']}><b>Type:</b> {character.type}</div> : null}\n\n                    <div className={classes['profile-details-item']}>\n                        <b>Origin location:</b> <a target=\"_blank\" rel=\"noreferrer\" href={character.origin.url}>{character.origin.name}</a>\n                    </div>\n                    {\n                        character.location\n                            ? <div className={classes['profile-details-item']}><b>Current location:</b> <a target=\"_blank\" rel=\"noreferrer\" href={character.location.url}>{character.location.name}</a></div>\n                            : null\n                    }\n                    {\n                        Array.isArray(character.episode)\n                            ? <div style={{ marginTop: 8 }}>\n                                <b>Featured Episodes:</b><br />\n                                <div className={classes['chip-wrapper']}>\n                                    {character.episode.map(episodeItem => (\n                                        <a\n                                            key={episodeItem}\n                                            className={classes.chip}\n                                            target=\"_blank\"\n                                            rel=\"noreferrer\"\n                                            href={episodeItem}>\n                                            Episode&nbsp;{getEpisodeFromURL(episodeItem)}\n                                        </a>))}\n                                </div></div>\n                            : null\n                    }\n                </div>\n            </section></>\n        );\n    }\n}\n\nexport default CharacterPage","import { Component } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport theRickAndMortyLogo from './images/the_rick_and_morty.png';\n\nimport HomePage from './pages/Home/HomePage';\nimport CharacterPage from './pages/Character/CharacterPage';\n\nimport { fetchPage, fetchCharacter } from './services/CharacterService';\n\nimport IPage from './models/IPage';\nimport ICharacter from './models/ICharacter';\n\ninterface IPageMap {\n  [key: string]: IPage;\n}\n\ninterface IAppState {\n  pages: IPageMap;\n  selectedPage: IPage | null;\n  selectedCharacter: ICharacter | null | undefined;\n  pageLoading: boolean,\n  characterLoading: boolean,\n}\n\n\n/**\n * This is a wrapper component for whole application \n * Could have introduce Redux but for small application it is unnecessary\n */\nclass App extends Component<Readonly<{}>, IAppState>{\n  constructor(props: Readonly<{}>) {\n    super(props);\n\n    this.state = {\n      pages: {}, // used for caching the pages to save API calls in a session\n      selectedPage: null, // currently shown page with characters list\n      selectedCharacter: null, // from characters list if you click any particular character it will take you to details of that character\n      pageLoading: false, // to show the loading state of HomePage\n      characterLoading: false, // to show the loading state of CharacterPage\n    };\n\n    this.handlePageChange = this.handlePageChange.bind(this);\n    this.handleCharacterChange = this.handleCharacterChange.bind(this);\n  }\n\n  /**\n   * this method handles the page change\n   * you just pass th pageId to be shown rest this methodd will handle\n   * we can change a page from Prev+Next+GoToPage buttons OR from URL as well\n   * we are memoizing the API response so that we can save network calls across back and forth navigations\n   * @param pageId \n   */\n  async handlePageChange(pageId: string) {\n    this.setState({ ...this.state, pageLoading: true });\n\n    let pageNumber = parseInt(pageId);\n    const newState = { ...this.state };\n    let page = this.state.pages[pageNumber.toString()]; // checking whether page already exists in cache or not\n\n    if (!page) {\n      const result = await fetchPage(pageNumber); // if not then fetch from API call, [service layer]\n\n      if (!result.error) {\n        page = result;\n        newState.selectedPage = page;\n        newState.pages = { ...newState.pages, [pageNumber]: page }; // in case of success of API adding it to cache\n      } else {\n        newState.selectedPage = null;\n      }\n    } else {\n      newState.selectedPage = page;\n    }\n\n    newState.pageLoading = false;\n    this.setState(newState);\n  }\n\n  /**\n   * this method handles the character change\n   * we can change a character from HomePage charcters tile list OR from URL too\n   * we are re-using the same data from the character tilee if it is not available them calling backend API\n   * @param characterId \n   */\n  async handleCharacterChange(characterId: number) {\n    this.setState({ ...this.state, characterLoading: true });\n    let matchedCharacter = this.state.selectedPage?.results.find(character => character.id === characterId) as (ICharacter | undefined | null);\n    if (!matchedCharacter) {\n      const result = await fetchCharacter(characterId); // REST API Call for character details\n\n      matchedCharacter = result;\n      if (result.error) {\n        matchedCharacter = null;\n      }\n    }\n\n    this.setState({ ...this.state, selectedCharacter: matchedCharacter, characterLoading: false });\n  }\n\n  render() {\n    return (\n      <>\n        <header className=\"app-header\">\n          <img className=\"app-header-logo\" alt=\"The Rick and Morty\" src={theRickAndMortyLogo} />\n        </header>\n        <Router>\n          <main className=\"app-main-content\">\n            <Switch>\n              <Route path=\"/character/:characterId\" render={(props) => (\n                <CharacterPage {...props}\n                  character={this.state.selectedCharacter}\n                  handleCharacterChange={this.handleCharacterChange}\n                  characterLoading={this.state.characterLoading} />)}>\n              </Route>\n              <Route path=\"/:pageId\" render={(props) => (\n                <HomePage {...props}\n                  page={this.state.selectedPage}\n                  handlePageChange={this.handlePageChange}\n                  pageLoading={this.state.pageLoading} />)}>\n              </Route>\n              {/* added a safe case where user can access plain URL and it will automatically redirect to meaning full HomePage */}\n              <Route path=\"/\">\n                <Redirect to=\"/1\"></Redirect>\n              </Route>\n            </Switch>\n          </main>\n        </Router >\n      </>\n    );\n  }\n}\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chip\":\"CharacterPage_chip__Jgrav\",\"chip-wrapper\":\"CharacterPage_chip-wrapper__1jqhR\",\"wrapper\":\"CharacterPage_wrapper__1ZJwu\",\"profile-details\":\"CharacterPage_profile-details__1BXvg\",\"profile-details-title\":\"CharacterPage_profile-details-title__1ifAZ\",\"profile-details-item\":\"CharacterPage_profile-details-item__3QtTm\",\"profile-picture\":\"CharacterPage_profile-picture__3Emrf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"CharacterTile_tile__2XfHQ\",\"image\":\"CharacterTile_image__2Bqng\",\"image-img\":\"CharacterTile_image-img__3t8VC\",\"details\":\"CharacterTile_details__2Iir_\",\"sub-details\":\"CharacterTile_sub-details__15xNX\",\"sub-details-line\":\"CharacterTile_sub-details-line__3_Err\",\"link\":\"CharacterTile_link__2khkJ\"};"],"sourceRoot":""}